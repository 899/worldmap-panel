{"version":3,"sources":["../src/worldmap_ctrl.js"],"names":[],"mappings":"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","file":"worldmap_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport TimeSeries from 'app/core/time_series2';\nimport kbn from 'app/core/utils/kbn';\nimport mapRenderer from './map_renderer';\nimport './css/worldmap-panel.css!';\n\nconst panelDefaults = {\n  mapCenterLatitude: 0,\n  mapCenterLongitude: 0,\n  initialZoom: 1,\n  valueName: 'avg',\n  circleSize: 100,\n  tileServer: 'Mapquest',\n  locationData: 'countries',\n  thresholds: '0,10',\n  colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n};\n\nconst tileServers = {\n  'Estri WorldGrey': {url: 'http://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', attribution: 'Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ', subdomains: '' },\n  'OpenStreetMap': {url: 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>', subdomains: 'abc'},\n  'Mapquest': {url: 'http://otile{s}.mqcdn.com/tiles/1.0.0/map/{z}/{x}/{y}.png', attribution: 'Tiles by <a href=\"http://www.mapquest.com/\">MapQuest</a> &mdash; ' +\n            'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>',\n            subdomains: '1234'},\n  'CartoDB Positron': { url: 'http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>', subdomains: 'abcd'},\n  'CartoDB Dark': {url: 'http://a.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png', attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>', subdomains: '1234'}\n};\n\nexport class WorldmapCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector, contextSrv) {\n    super($scope, $injector);\n\n    if (this.panel && !this.panel.tileServer) {\n      this.panel.tileServer = contextSrv.user.lightTheme ? 'CartoDB Dark' : 'CartoDB Positron';\n    }\n    _.defaults(this.panel, panelDefaults);\n    this.tileServers = tileServers;\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n\n    if (!this.map) {\n      window.$.getJSON('public/plugins/grafana-worldmap-panel/' + this.panel.locationData + '.json').then(res => {\n        this.locations = res;\n        this.render();\n      });\n    }\n  }\n\n  onPanelTeardown() {\n    this.circles = [];\n    this.legend.removeFrom(this.map);\n    this.legend = null;\n    if (this.map) this.map.remove();\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Worldmap', 'public/plugins/grafana-worldmap-panel/editor.html', 2);\n  }\n\n  onDataReceived(dataList) {\n    this.series = dataList.map(this.seriesHandler.bind(this));\n    const data = [];\n    this.setValues(data);\n    this.data = data;\n\n    this.updateThresholdData();\n\n    this.render();\n  }\n\n  setValues(data) {\n    if (this.series && this.series.length > 0) {\n      this.series.forEach(serie => {\n        const lastPoint = _.last(serie.datapoints);\n        const lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n\n        if (_.isString(lastValue)) {\n          data.push({key: serie.alias, value: 0, valueFormatted: lastValue, valueRounded: 0});\n        } else {\n          const dataValue = {\n            key: serie.alias,\n            value: serie.stats[this.panel.valueName],\n            flotpairs: serie.flotpairs,\n            valueFormatted: lastValue,\n            valueRounded: 0\n          };\n\n          dataValue.valueRounded = kbn.roundValue(dataValue.value, 0);\n          data.push(dataValue);\n        }\n      });\n    }\n  }\n\n  seriesHandler(seriesData) {\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n  setNewMapCenter() {\n    this.mapCenterMoved = true;\n    this.render();\n  }\n\n  setZoom() {\n    this.map.setZoom(this.panel.initialZoom);\n  }\n\n  changeTileServer() {\n    this.legend.removeFrom(this.map);\n    this.legend = null;\n    this.map.remove();\n    this.map = null;\n    this.render();\n  }\n\n  changeThresholds() {\n    this.updateThresholdData();\n    this.legend.update();\n    this.render();\n  }\n\n  updateThresholdData() {\n    this.data.thresholds = this.panel.thresholds.split(',').map(strValue => {\n      return Number(strValue.trim());\n    });\n  }\n\n  changeLocationData() {\n    window.$.getJSON('public/plugins/grafana-worldmap-panel/' + this.panel.locationData + '.json').then(res => {\n      this.locations = res;\n      this.render();\n    });\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    mapRenderer(scope, elem, attrs, ctrl);\n  }\n}\n\nWorldmapCtrl.templateUrl = 'module.html';\n"]}